/*
 * Application to help putting pets from animal shelter across.
 * Copyright (C) 2017
 *     Felix Koch <felix.koch@haw-hamburg.de>,
 *     Kristian Exss <Kristian.Exss@HAW-Hamburg.de>,
 *     Adrian Bostelmann <Adrian.Bostelmann@HAW-Hamburg.de>,
 *     Karsten Boehringer <Karsten.Boehringer@HAW-Hamburg.de>,
 *     Gehui Xu <Gehui.Xu@HAW-Hamburg.de>,
 *     Gerriet Hinrichs <gerriet.hinrichs@haw-hamburg.de>.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

/*************************
 * General configuration *
 *************************/

// Build script plugins
plugins {

    // node integration
    id "com.moowork.node" version "1.0.1"

    // spring boot support
    id "org.springframework.boot" version "1.4.3.RELEASE"

    // sonarqube integration
    id "org.sonarqube" version "2.3"
}

// add IDE support
apply plugin: "idea"
apply plugin: "eclipse"

// add java support
apply plugin: "java"

// add node support (for typescript and less compile)
apply plugin: "com.moowork.node"

// add spring boot support
apply plugin: 'org.springframework.boot'

// add sonarqube support
apply plugin: 'org.sonarqube'

// dependency repositories
repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectName", "SE2-Tierheimprojekt"
        property "sonar.projectKey", "se2tierheimprojekt"
    }
}

/******************************
 * Build-script configuration *
 ******************************/

// Git magic to get the actual version
def getVersionFromGit = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        System.out.println("Loading version from git failed: " + e.getLocalizedMessage())
        return "SNAPSHOT"
    }
}
final currentVersion = getVersionFromGit()
System.out.println("Build version: " + currentVersion)

// Task that generates the system.ini file that contains basic system config
task generateSystemIni() {
    doLast {
        def builder = new StringBuilder()

        // generate stuff
        builder.append("[BUILD]")
        builder.append(System.lineSeparator())

        builder.append("Version=")
        builder.append(currentVersion)
        builder.append(System.lineSeparator())

        builder.append("Timestamp=")
        builder.append(OffsetDateTime.now().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME))
        builder.append(System.lineSeparator())

        // write stuff to file
        def file = new File("${project.projectDir}/system.ini")
        file.write(builder.toString())
    }

    outputs.upToDateWhen { false }
}

/*******************************************************
 * Configuration for the client (containing ts / less) *
 *******************************************************/

// node configuration
node {

    // version of node to use.
    version = '7.4.0'

    // version of npm to use.
    npmVersion = '4.1.1'

    // version of yarn to use.
    yarnVersion = '0.18.1'

    // base url for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // download node using above parameters.
    download = true

    // set the work directory for unpacking node
    workDir = file("${project.buildDir}/node/nodejs")

    // set the work directory for npm
    npmWorkDir = file("${project.buildDir}/node/npm")

    // set the work directory for yarn
    yarnWorkDir = file("${project.buildDir}/node/yarn")

    // versions for less & typescript can be found within "package.json" file
}

// copy package json so node can find it
task copyPackageJson(type: Copy) {
    from "${project.projectDir}/package.json"
    into "${project.buildDir}/node/npm"
}
npmSetup.dependsOn copyPackageJson

// build typescript
task buildTypeScript(type: NodeTask, dependsOn: npmInstall) {
    script = new File(node.nodeModulesDir, 'node_modules/typescript/bin/tsc')

    // for watcher task register source files
    inputs.files fileTree("${project.projectDir}/src/main/view").include("**/*.ts")

    // compiler options
    args = [
            "--project", "${project.projectDir}/src/main/view",
            "--outDir", "${project.projectDir}/static-files/view",
    ]
}

// build typescript into the test directory (so unit tests can find those files)
// and also generate interface definitions from source
task buildTypescriptForTests(type: NodeTask, dependsOn: npmInstall) {
    script = new File(node.nodeModulesDir, 'node_modules/typescript/bin/tsc')

    // compiler options
    args = [
            "--project", "${project.projectDir}/src/main/view",
            "--outDir", "${project.buildDir}/view-test/uut",

            // change module system to CommonJS to work in node environment
            "--module", "CommonJS",

            // also generate interface definitions to provide correct typings in unit-tests
            "--declaration",
            "--declarationDir", "${project.projectDir}/src/test/view/uut"
    ]
}

// copy definition files to be available in tests
task copyTypescriptDefinitionFilesForTests(type: Copy) {
    from("${project.projectDir}/src/main/view/") {
        include "**/*.d.ts"
        exclude "vendor/requireJS.d.ts"
    }
    into "${project.projectDir}/src/test/view/uut"
}

// compile tests
task buildTypescriptTests(type: NodeTask) {
    script = new File(node.nodeModulesDir, 'node_modules/typescript/bin/tsc')

    // compiler options
    args = [
            "--project", "${project.projectDir}/src/test/view",
            "--outDir", "${project.buildDir}/view-test"
    ]
}
buildTypescriptTests.dependsOn buildTypescriptForTests
buildTypescriptTests.dependsOn copyTypescriptDefinitionFilesForTests

// run client test task
task testClient(type: NodeTask, dependsOn: buildTypescriptTests) {
    script = new File(node.nodeModulesDir, 'node_modules/mocha/bin/mocha')

    // compiler options
    args = [
            "--reporter", "list",
            "--recursive"
    ]

    // add directories containing tests
    new File(project.projectDir, "src/test/view").eachDir() { dir ->
        def name = dir.getName()
        if (name != "uut" && name != "vendor") {
            args += "${project.buildDir}/view-test/" + name
        }
    }
}

// build less files
task buildLessFiles(type: NodeTask, dependsOn: npmInstall) {
    script = new File(node.nodeModulesDir, 'node_modules/less/bin/lessc')

    inputs.files fileTree("${project.projectDir}/src/main/style").include("**/*.less")

    args = [
            "--source-map",
            "--no-js",
            "${project.projectDir}/src/main/style/app.less",
            "${project.projectDir}/static-files/app.css",
    ]
}

// copy resources
task copyResources(type: Copy) {
    from "${project.projectDir}/src/main/static-files/"
    into "${project.projectDir}/static-files"
}

// copy templates
task copyTemplates(type: Copy) {
    from("${project.projectDir}/src/main/view/") {
        include "**/*.html"
    }
    into "${project.projectDir}/static-files/view"
}

// client task
task client {}
client.dependsOn buildTypeScript
client.dependsOn buildLessFiles
client.dependsOn copyResources
client.dependsOn copyTemplates

// clear static files task
task cleanStaticFiles(type: Delete) {
    delete fileTree("${project.projectDir}/static-files")
}

// remove generated system.ini task
task cleanSystemINI(type: Delete) {
    delete "${project.projectDir}/system.ini"
}

// remove generated api files
task cleanGeneratedApi(type: Delete) {
    delete fileTree("${project.projectDir}/src/main/view/clientApi")
}

// combined cleanup task
clean.dependsOn cleanSystemINI
clean.dependsOn cleanStaticFiles
clean.dependsOn cleanGeneratedApi

/****************************************************************
 * Configuration for the server (containing server application) *
 ****************************************************************/

// use java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

// enable recommended java warnings
compileJava.options.compilerArgs = ["-Xlint"]

// project group and version
group 'de.stuff42'
version currentVersion

// task that generates client api
task generateClientAPI(type: JavaCompile) {
    source = sourceSets.main.java // input source set
    classpath = sourceSets.main.compileClasspath // classpath

    // specify javac arguments
    options.compilerArgs = [
            "-proc:only", // only do processing
            "-processor", "de.stuff42.apigenerator.processor.RestControllerProcessor"
    ]

    // set output directory (so gradle knows when to rebuild)
    destinationDir = new File(project.projectDir, "/src/main/view/clientApi")
}
generateClientAPI.dependsOn generateSystemIni

// run api generation whenever the main source set is compiled
classes.dependsOn generateClientAPI

dependencies {

    // utils project
    compile project(':utils')

    // spring
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.3.RELEASE') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: '1.4.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-context-support', version: '4.3.5.RELEASE'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.4.3.RELEASE'

    // template engine for views
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'

    // database framework integration (has hibernate framework as dependency)
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.4.3.RELEASE'

    // database drivers (add your own required drivers as runtime dependency here)
    runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

    // REST Assured and jUnit
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.2'

    // add compile only dependency for client api generator
    compileOnly project(":apigenerator")
}

// Add system.ini generation task to build
compileJava.dependsOn generateSystemIni
build.dependsOn generateSystemIni

/*
 * Stuff required for travis to work properly
 */
task createDatabaseIniForTravis() {
    doLast {
        def builder = new StringBuilder()

        // generate stuff
        builder.append("[Database]")
        builder.append(System.lineSeparator())

        builder.append("Configuration=travis")
        builder.append(System.lineSeparator())

        builder.append("TestConfiguration=travis")
        builder.append(System.lineSeparator())

        // write stuff to file
        def file = new File("${project.projectDir}/database/database.ini")
        file.write(builder.toString())
    }

    outputs.upToDateWhen { false }
}

// travis executes the assemble task for setup and compile
assemble.dependsOn createDatabaseIniForTravis
assemble.dependsOn client
assemble.dependsOn buildTypescriptTests

// travis executes the check task for test execution
check.dependsOn assemble
check.dependsOn test
check.dependsOn testClient
